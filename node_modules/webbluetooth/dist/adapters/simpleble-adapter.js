"use strict";
/*
* Node Web Bluetooth
* Copyright (c) 2023 Rob Moran
*
* The MIT License (MIT)
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimplebleAdapter = void 0;
var events_1 = require("events");
var uuid_1 = require("../uuid");
var simpleble_1 = require("./simpleble");
/**
 * @hidden
 */
var SimplebleAdapter = /** @class */ (function (_super) {
    __extends(SimplebleAdapter, _super);
    function SimplebleAdapter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.peripherals = new Map();
        _this.servicesByPeripheral = new Map();
        _this.peripheralByService = new Map();
        _this.serviceByCharacteristic = new Map();
        _this.characteristicsByService = new Map();
        _this.characteristicByDescriptor = new Map();
        _this.descriptors = new Map();
        _this.charEvents = new Map();
        return _this;
    }
    SimplebleAdapter.prototype.validDevice = function (device, serviceUUIDs) {
        if (serviceUUIDs.length === 0) {
            // Match any device
            return true;
        }
        if (!device._serviceUUIDs) {
            // No advertised services, no match
            return false;
        }
        var advertisedUUIDs = device._serviceUUIDs.map(function (serviceUUID) { return uuid_1.BluetoothUUID.canonicalUUID(serviceUUID); });
        // An advertised UUID matches our search UUIDs
        return serviceUUIDs.some(function (serviceUUID) { return advertisedUUIDs.indexOf(serviceUUID) >= 0; });
    };
    SimplebleAdapter.prototype.buildBluetoothDevice = function (device) {
        var e_1, _a;
        var name = device.identifier;
        var address = device.address;
        var rssi = device.rssi;
        var txPower = device.txPower;
        var id = address || "".concat(name);
        var serviceUUIDs = [];
        var serviceData = new Map();
        try {
            for (var _b = __values(device.services), _c = _b.next(); !_c.done; _c = _b.next()) {
                var service = _c.value;
                serviceUUIDs.push(service.uuid);
                if (service.data) {
                    serviceData.set(service.uuid, service.data);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var manufacturerData = new Map();
        for (var id_1 in device.manufacturerData) {
            manufacturerData.set(id_1, new DataView(device.manufacturerData[id_1].buffer));
        }
        return {
            id: id,
            name: name,
            _serviceUUIDs: serviceUUIDs,
            _adData: {
                rssi: rssi,
                txPower: txPower,
                serviceData: serviceData,
                manufacturerData: manufacturerData
            }
        };
    };
    SimplebleAdapter.prototype.enumerate = function (peripheral) {
        var e_2, _a, e_3, _b, e_4, _c;
        this.servicesByPeripheral.clear();
        this.peripheralByService.clear();
        this.serviceByCharacteristic.clear();
        this.characteristicsByService.clear();
        this.characteristicByDescriptor.clear();
        this.descriptors.clear();
        this.charEvents.clear();
        var services = [];
        try {
            for (var _d = __values(peripheral.services), _e = _d.next(); !_e.done; _e = _d.next()) {
                var service = _e.value;
                var serviceUUID = uuid_1.BluetoothUUID.canonicalUUID(service.uuid);
                this.characteristicsByService.set(serviceUUID, service.characteristics);
                try {
                    for (var _f = (e_3 = void 0, __values(service.characteristics)), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var char = _g.value;
                        this.serviceByCharacteristic.set(char.uuid, serviceUUID);
                        this.descriptors.set(char.uuid, char.descriptors);
                        try {
                            for (var _h = (e_4 = void 0, __values(char.descriptors)), _j = _h.next(); !_j.done; _j = _h.next()) {
                                var desc = _j.value;
                                this.characteristicByDescriptor.set("".concat(char.uuid, "-").concat(desc), { char: char.uuid, desc: desc });
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                this.peripheralByService.set(service.uuid, peripheral);
                services.push(service);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this.servicesByPeripheral.set(peripheral, services);
    };
    Object.defineProperty(SimplebleAdapter.prototype, "state", {
        get: function () {
            var adapterEnabled = (0, simpleble_1.isEnabled)();
            return !!adapterEnabled;
        },
        enumerable: false,
        configurable: true
    });
    SimplebleAdapter.prototype.getEnabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.state];
            });
        });
    };
    SimplebleAdapter.prototype.startScan = function (serviceUUIDs, foundFn) {
        return __awaiter(this, void 0, void 0, function () {
            var success;
            var _this = this;
            return __generator(this, function (_a) {
                if (this.state === false) {
                    throw new Error('adapter not enabled');
                }
                if (!this.adapter) {
                    this.adapter = (0, simpleble_1.getAdapters)()[0];
                }
                this.adapter.setCallbackOnScanFound(function (peripheral) {
                    var device = _this.buildBluetoothDevice(peripheral);
                    if (_this.validDevice(device, serviceUUIDs)) {
                        if (!_this.peripherals.has(device.id)) {
                            _this.peripherals.set(device.id, peripheral);
                            // Only call the found function the first time we find a valid device
                            foundFn(device);
                        }
                    }
                });
                this.peripherals.clear();
                success = this.adapter.scanStart();
                if (!success) {
                    throw new Error('scan start failed');
                }
                return [2 /*return*/];
            });
        });
    };
    SimplebleAdapter.prototype.stopScan = function (_errorFn) {
        if (this.adapter) {
            var success = this.adapter.scanStop();
            if (!success) {
                throw new Error('scan stop failed');
            }
        }
    };
    SimplebleAdapter.prototype.connect = function (id, disconnectFn) {
        return __awaiter(this, void 0, void 0, function () {
            var peripheral, success;
            return __generator(this, function (_a) {
                peripheral = this.peripherals.get(id);
                if (!peripheral) {
                    throw new Error('Peripheral not found');
                }
                if (!peripheral.connectable) {
                    throw new Error('Connection not possible');
                }
                success = peripheral.connect();
                if (!success) {
                    throw new Error('Connect failed');
                }
                this.enumerate(peripheral);
                if (disconnectFn) {
                    peripheral.setCallbackOnDisconnected(function () { return disconnectFn(); });
                }
                return [2 /*return*/];
            });
        });
    };
    SimplebleAdapter.prototype.disconnect = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var peripheral, success;
            return __generator(this, function (_a) {
                peripheral = this.peripherals.get(id);
                if (!peripheral) {
                    throw new Error('Peripheral not found');
                }
                success = peripheral.disconnect();
                if (!success) {
                    throw new Error('Disconnect failed');
                }
                return [2 /*return*/];
            });
        });
    };
    SimplebleAdapter.prototype.discoverServices = function (id, serviceUUIDs) {
        return __awaiter(this, void 0, void 0, function () {
            var peripheral, discovered, _a, _b, service;
            var e_5, _c;
            return __generator(this, function (_d) {
                peripheral = this.peripherals.get(id);
                if (!peripheral) {
                    throw new Error('Peripheral not found');
                }
                discovered = [];
                try {
                    for (_a = __values(peripheral.services), _b = _a.next(); !_b.done; _b = _a.next()) {
                        service = _b.value;
                        if (!serviceUUIDs || serviceUUIDs.length === 0 || serviceUUIDs.indexOf(service.uuid) >= 0) {
                            discovered.push({
                                uuid: service.uuid,
                                isPrimary: true
                            });
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
                return [2 /*return*/, discovered];
            });
        });
    };
    SimplebleAdapter.prototype.discoverIncludedServices = function (_handle, _serviceUUIDs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // Currently not implemented
                return [2 /*return*/, []];
            });
        });
    };
    SimplebleAdapter.prototype.discoverCharacteristics = function (serviceUuid, characteristicUUIDs) {
        return __awaiter(this, void 0, void 0, function () {
            var peripheral, characteristics, discovered, _loop_1, characteristics_1, characteristics_1_1, characteristic;
            var e_6, _a;
            var _this = this;
            return __generator(this, function (_b) {
                peripheral = this.peripheralByService.get(serviceUuid);
                characteristics = this.characteristicsByService.get(serviceUuid);
                discovered = [];
                _loop_1 = function (characteristic) {
                    var charUUID = uuid_1.BluetoothUUID.canonicalUUID(characteristic.uuid);
                    if (!characteristicUUIDs || characteristicUUIDs.length === 0 || characteristicUUIDs.indexOf(charUUID) >= 0) {
                        discovered.push({
                            uuid: charUUID,
                            properties: {
                                // Not all of these are supported in SimpleBle
                                // broadcast: characteristic.capabilities.includes('???'),
                                read: characteristic.canRead,
                                writeWithoutResponse: characteristic.canWriteRequest,
                                write: characteristic.canWriteCommand,
                                notify: characteristic.canNotify,
                                indicate: characteristic.canIndicate,
                                // authenticatedSignedWrites: characteristic.capabilities.includes('???'),
                                // reliableWrite: characteristic.capabilities.includes('???'),
                                // writableAuxiliaries: characteristic.capabilities.includes('???'),
                            }
                        });
                        if (characteristic.canIndicate) {
                            peripheral.indicate(serviceUuid, charUUID, function (data) {
                                if (_this.charEvents.has(charUUID)) {
                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                                    _this.charEvents.get(charUUID)(new DataView(data.buffer));
                                }
                            });
                        }
                        if (characteristic.canNotify) {
                            peripheral.notify(serviceUuid, charUUID, function (data) {
                                if (_this.charEvents.has(charUUID)) {
                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                                    _this.charEvents.get(charUUID)(new DataView(data.buffer));
                                }
                            });
                        }
                    }
                };
                try {
                    for (characteristics_1 = __values(characteristics), characteristics_1_1 = characteristics_1.next(); !characteristics_1_1.done; characteristics_1_1 = characteristics_1.next()) {
                        characteristic = characteristics_1_1.value;
                        _loop_1(characteristic);
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (characteristics_1_1 && !characteristics_1_1.done && (_a = characteristics_1.return)) _a.call(characteristics_1);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
                return [2 /*return*/, discovered];
            });
        });
    };
    SimplebleAdapter.prototype.discoverDescriptors = function (charUuid, descriptorUUIDs) {
        return __awaiter(this, void 0, void 0, function () {
            var descriptors, discovered, descriptors_1, descriptors_1_1, descriptor, descUUID;
            var e_7, _a;
            return __generator(this, function (_b) {
                descriptors = this.descriptors.get(charUuid);
                discovered = [];
                try {
                    for (descriptors_1 = __values(descriptors), descriptors_1_1 = descriptors_1.next(); !descriptors_1_1.done; descriptors_1_1 = descriptors_1.next()) {
                        descriptor = descriptors_1_1.value;
                        descUUID = uuid_1.BluetoothUUID.canonicalUUID(descriptor);
                        if (!descriptorUUIDs || descriptorUUIDs.length === 0 || descriptorUUIDs.indexOf(descUUID) >= 0) {
                            discovered.push({
                                uuid: descUUID
                            });
                        }
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (descriptors_1_1 && !descriptors_1_1.done && (_a = descriptors_1.return)) _a.call(descriptors_1);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
                return [2 /*return*/, discovered];
            });
        });
    };
    SimplebleAdapter.prototype.readCharacteristic = function (charUuid) {
        return __awaiter(this, void 0, void 0, function () {
            var serviceUuid, peripheral, data;
            return __generator(this, function (_a) {
                serviceUuid = this.serviceByCharacteristic.get(charUuid);
                peripheral = this.peripheralByService.get(serviceUuid);
                data = peripheral.read(serviceUuid, charUuid);
                return [2 /*return*/, new DataView(data.buffer)];
            });
        });
    };
    SimplebleAdapter.prototype.writeCharacteristic = function (charUuid, value, withoutResponse) {
        if (withoutResponse === void 0) { withoutResponse = false; }
        return __awaiter(this, void 0, void 0, function () {
            var serviceUuid, peripheral, success;
            return __generator(this, function (_a) {
                serviceUuid = this.serviceByCharacteristic.get(charUuid);
                peripheral = this.peripheralByService.get(serviceUuid);
                success = false;
                if (withoutResponse) {
                    success = peripheral.writeCommand(serviceUuid, charUuid, new Uint8Array(value.buffer));
                }
                else {
                    success = peripheral.writeRequest(serviceUuid, charUuid, new Uint8Array(value.buffer));
                }
                if (!success) {
                    throw new Error('Write failed');
                }
                return [2 /*return*/];
            });
        });
    };
    SimplebleAdapter.prototype.enableNotify = function (handle, notifyFn) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.charEvents.set(handle, notifyFn);
                return [2 /*return*/];
            });
        });
    };
    SimplebleAdapter.prototype.disableNotify = function (handle) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.charEvents.delete(handle);
                return [2 /*return*/];
            });
        });
    };
    SimplebleAdapter.prototype.readDescriptor = function (handle) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, char, desc, serviceUuid, peripheral, data;
            return __generator(this, function (_b) {
                _a = this.characteristicByDescriptor.get(handle), char = _a.char, desc = _a.desc;
                serviceUuid = this.serviceByCharacteristic.get(char);
                peripheral = this.peripheralByService.get(serviceUuid);
                data = peripheral.readDescriptor(serviceUuid, char, desc);
                if (!data) {
                    throw new Error('Read failed');
                }
                return [2 /*return*/, new DataView(data.buffer)];
            });
        });
    };
    SimplebleAdapter.prototype.writeDescriptor = function (handle, value) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, char, desc, serviceUuid, peripheral, success;
            return __generator(this, function (_b) {
                _a = this.characteristicByDescriptor.get(handle), char = _a.char, desc = _a.desc;
                serviceUuid = this.serviceByCharacteristic.get(char);
                peripheral = this.peripheralByService.get(serviceUuid);
                success = peripheral.writeDescriptor(serviceUuid, char, desc, new Uint8Array(value.buffer));
                if (!success) {
                    throw new Error('Write failed');
                }
                return [2 /*return*/];
            });
        });
    };
    return SimplebleAdapter;
}(events_1.EventEmitter));
exports.SimplebleAdapter = SimplebleAdapter;
//# sourceMappingURL=simpleble-adapter.js.map