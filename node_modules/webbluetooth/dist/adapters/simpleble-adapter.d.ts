/// <reference types="web-bluetooth" />
/// <reference types="node" />
import { EventEmitter } from 'events';
import { Adapter as BluetoothAdapter } from './adapter';
import { BluetoothRemoteGATTCharacteristicImpl } from '../characteristic';
import { BluetoothRemoteGATTServiceImpl } from '../service';
import { BluetoothRemoteGATTDescriptorImpl } from '../descriptor';
/**
 * @hidden
 */
export declare class SimplebleAdapter extends EventEmitter implements BluetoothAdapter {
    private adapter;
    private peripherals;
    private servicesByPeripheral;
    private peripheralByService;
    private serviceByCharacteristic;
    private characteristicsByService;
    private characteristicByDescriptor;
    private descriptors;
    private charEvents;
    private validDevice;
    private buildBluetoothDevice;
    private enumerate;
    private get state();
    getEnabled(): Promise<boolean>;
    startScan(serviceUUIDs: Array<string>, foundFn: (device: Partial<BluetoothDevice>) => void): Promise<void>;
    stopScan(_errorFn?: (errorMsg: string) => void): void;
    connect(id: string, disconnectFn?: () => void): Promise<void>;
    disconnect(id: string): Promise<void>;
    discoverServices(id: string, serviceUUIDs?: Array<string>): Promise<Array<Partial<BluetoothRemoteGATTServiceImpl>>>;
    discoverIncludedServices(_handle: string, _serviceUUIDs?: Array<string>): Promise<Array<Partial<BluetoothRemoteGATTServiceImpl>>>;
    discoverCharacteristics(serviceUuid: string, characteristicUUIDs?: Array<string>): Promise<Array<Partial<BluetoothRemoteGATTCharacteristicImpl>>>;
    discoverDescriptors(charUuid: string, descriptorUUIDs?: Array<string>): Promise<Array<Partial<BluetoothRemoteGATTDescriptorImpl>>>;
    readCharacteristic(charUuid: string): Promise<DataView>;
    writeCharacteristic(charUuid: string, value: DataView, withoutResponse?: boolean): Promise<void>;
    enableNotify(handle: string, notifyFn: (value: DataView) => void): Promise<void>;
    disableNotify(handle: string): Promise<void>;
    readDescriptor(handle: string): Promise<DataView>;
    writeDescriptor(handle: string, value: DataView): Promise<void>;
}
